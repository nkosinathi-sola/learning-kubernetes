# metrics are monitored in memory
# no historical data generated
# you'll need the likes of prometheus, datadog etc agents

# kubelet monitors in memory through cAdvisor


# >kubectl top node
# >kubectl top pod

# root@controlplane:~# git clone https://github.com/kodekloudhub/kubernetes-metrics-server.git
# Cloning into 'kubernetes-metrics-server'...
# remote: Enumerating objects: 24, done.
# remote: Counting objects: 100% (12/12), done.
# remote: Compressing objects: 100% (12/12), done.
# remote: Total 24 (delta 4), reused 0 (delta 0), pack-reused 12
# Unpacking objects: 100% (24/24), done.
# root@controlplane:~# pwd
# /root
# root@controlplane:~# ls
# kubernetes-metrics-server  sample.yaml
# root@controlplane:~# cd kubernetes-metrics-server/
# root@controlplane:~/kubernetes-metrics-server# ls
# README.md                       auth-reader.yaml                metrics-server-service.yaml
# aggregated-metrics-reader.yaml  metrics-apiservice.yaml         resource-reader.yaml
# auth-delegator.yaml             metrics-server-deployment.yaml
# root@controlplane:~/kubernetes-metrics-server# kubectl create -f .
# clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created
# clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created
# rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created
# apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created
# serviceaccount/metrics-server created
# deployment.apps/metrics-server created
# service/metrics-server created
# clusterrole.rbac.authorization.k8s.io/system:metrics-server created
# clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created
# root@controlplane:~/kubernetes-metrics-server# kubectl top node
# NAME           CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   
# controlplane   498m         1%     1167Mi          0%        
# node01         63m          0%     335Mi           0%        
# root@controlplane:~/kubernetes-metrics-server# ^C
# root@controlplane:~/kubernetes-metrics-server# 

apiVersion: v1
kind: Pod
metadata:
  name: event-simulator-pod
spec:
  containers:
  - name: event-simulator
    image: some-event-simulator
  - name: image-processor
    image: some-image-processor    

# > kubectl logs -f event-simulator-pod event-simulator    